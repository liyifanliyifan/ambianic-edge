#################################################################
# Ambianic main configuration file with default settings        #
# This file is periodically committed to the git repo.          #
# It is also shipped with updates of the ambianic-edge binary. #
#################################################################
version: '2021.11.11'
version: '2022.5.28'

# path to the data directory
data_dir: ./data

# Set logging level to one of DEBUG, INFO, WARNING, ERROR
logging:
  file: ./data/ambianic-log.txt
  level: INFO
  # set a less noisy log level for the console output
  # console_level: WARNING

# settings related to PWA UI
ui:
  baseurl: "https://ui.ambianic.ai"

# Notification provider settings
# see https://github.com/caronc/apprise#popular-notification-services for syntax examples

notifications:
  default:
    enabled: false  # boolean; default = true; enables / disables notifications with 'default' tag
    templates:
      title: "${event_labels}"
      message: "${event_details_url}"
    include_attachments: false
    providers:
      # Using Dynaconf template substitutions
      # ref: https://www.dynaconf.com/dynamic/#template-substitutions
      - "@format ifttt://{this.ifttt_webhook_id}@ambianic"
#   catch_all_email:
#     enabled: false  # boolean; default = true; enables / disables notifications with 'catch_all_email' tag
#     include_attachments: true; default = false
#     providers:
#       - mailto://userid:pass@domain.com
#   alert_fall:
#     providers:
#       - mailto://userid:pass@domain.com
#       - json://hostname/a/path/to/post/to

ifttt_webhook_id: "" # None by default


# Pipeline event timeline configuration
timeline:
  event_log: ./data/timeline-event-log.yaml

# Cameras and other input data sources
# Using Home Assistant conventions to ease upcoming integration
sources:

  # direct support for raspberry picamera
  picamera:
    uri: picamera
    type: video
    live: true

  # local video device integration example
  webcam:
    uri: /dev/video0
    type: video
    live: true

  recorded_cam_feed:
    uri: file:///workspace/tests/pipeline/avsource/test2-cam-person1.mkv
    type: video
    live: false  # set to true for a continuous loop over the recorded file

ai_models:
  image_detection:
    model:
      tflite: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite
      edgetpu: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite
    labels: /opt/ambianic-edge/ai_models/coco_labels.txt
  face_detection:
    model:
      tflite: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_face_quant_postprocess.tflite
      edgetpu: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_face_quant_postprocess_edgetpu.tflite
    labels: /opt/ambianic-edge/ai_models/coco_labels.txt
    top_k: 2
  fall_detection:
    model:
      tflite: /opt/ambianic-edge/ai_models/posenet_mobilenet_v1_100_257x257_multi_kpt_stripped.tflite
      edgetpu: /opt/ambianic-edge/ai_models/posenet_mobilenet_v1_075_721_1281_quant_decoder_edgetpu.tflite
    labels: /opt/ambianic-edge/ai_models/pose_labels.txt
  fire_detection:
    model:
      tflite: /opt/ambianic-edge/ai_models/lite_fire_detection_model.tflite
    
    
    

# A named pipeline defines an ordered sequence of operations
# such as reading from a data source, AI model inference, saving samples and others.
pipelines:
   # Pipeline names could be descriptive, e.g. front_door_watch or entry_room_watch.
   area_watch:
     - source: picamera
     - detect_objects: # run ai inference on the input data
        ai_model: image_detection
        confidence_threshold: 0.6
        # Watch for any of the labels listed below. The labels must be from the model trained label set.
        # If no labels are listed, then watch for all model trained labels.
        label_filter:
          - person
          - car
     - save_detections: # save samples from the inference results
        positive_interval: 300 # how often (in seconds) to save samples with ANY results above the confidence threshold
        idle_interval: 6000 # how often (in seconds) to save samples with NO results above the confidence threshold
     - detect_falls: # look for falls
        ai_model: fall_detection
        confidence_threshold: 0.6
     - save_detections: # save samples from the inference results
        positive_interval: 10
        idle_interval: 600000
#        notify: # notify a thirdy party service
#          providers:
#            - alert_fall
     -  detect_fire: # look for fire
         ai_model: fire_detection
         confidence_threshold: 0.6
     -  save_detections: # save samples from the inference results
         positive_interval: 10
         idle_interval: 600
